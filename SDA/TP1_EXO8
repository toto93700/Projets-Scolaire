#include <stdio.h>
#include <stdlib.h>
typedef struct tableau_Entiers{
  int *tab;
  int capacite;
  int nbE;}tableauEntiers;
 tableauEntiers *creationTableau(int n){
// alloue la mémoire a notre struct
tableauEntiers *TE=calloc(10,sizeof(tableauEntiers));
TE->capacite=n;
TE->tab=calloc(n,sizeof(int));
TE->nbE=0;
return(TE);
}
tableauEntiers *copie(tableauEntiers *t){
tableauEntiers *tCopie=malloc(sizeof(tableauEntiers));
tCopie->capacite = t->capacite;
tCopie->nbE=t->nbE;
tCopie->tab=malloc(t->capacite*sizeof(int));
for(int i=0;i<t->capacite;i++){
    tCopie->tab[i]=t->tab[i];
  }
    return(tCopie);
}


void destructionTableau(tableauEntiers *tb){
 free(tb->tab);
 free(tb);

}
 void ajoutValeurFin(tableauEntiers *t,int val){
 int indiceNull;
 int i;
 int *k;
// Si la capacité est atteinte on double la capacité actuelle
 if(t->nbE==t->capacite){

 t->capacite=(t->capacite)*2 ;// double notre "capacité "
 k=realloc(t->tab,sizeof(int)*t->capacite);
 t->tab=k;

}
int b=0;
//cherche un endrois libre ou pouvoir ajouté un nombre
for(i=0;i<t->capacite;i++){
 if(t->tab[i]==NULL){
 indiceNull=i;
 b=1;
  if(b==1){
 t->tab[indiceNull]=val;
 t->nbE++;
 return;
  }
 }
}
//t->tab[indiceNull]=val;
//t->nbE++;
}

//incrémentation de notre nombre d'élément du tableau}
void supprimeValeurFin(tableauEntiers *t){
int b,i;
 b=0; // variable qui nous servira de boolean afin de sortir de notre boucle qui chek la derniere
 // case occupé par un nombre dans notre tableau afin de la supprimé
if (t->nbE>0) {
 //Parcoure le tableau de la fin jusquau début pour trouvé une casse occupé et la supprimer
 for(i=t->capacite;i>0;i--){
 if(t->tab[i]!=NULL){
 t->tab[i]=NULL;
 b=1;
 }
 if(b==1){break;}
 }
 t->nbE--;
}
}void afficheTableau(tableauEntiers *t){
int i;
 // Parcoure notre tableau et affiche toutes les valeurs
 for(i=0;i<t->capacite;i++){ printf("Tab[%d]=%d \n",i,t->tab[i]);}}

int taille (tableauEntiers *t){
return(t->nbE);
}

void ajoutValeur(int val,int ind,tableauEntiers *t){
    int *k;
    while(ind>=t->capacite){
     t->capacite*=2;//double notre capacité pour integré notre val a notre tableau
    }
  k=realloc(t->tab,sizeof(int)*t->capacite);
  t->tab=k;
 if(t->tab[ind]==NULL){
     t->nbE++;
 }
 (t->tab[ind])=val; // affecte val a notre tableau a l"indice @ind

}
void supprimeValeur(int ind,tableauEntiers *t){
    if(t->tab[ind]!=NULL ){
        t->nbE--;
    }
  t->tab[ind]=NULL;

}
void supprimeToutesValeurs(int val, tableauEntiers *t){
// parcoure et supprime les occurences correspondante à @val dans notre tableau
for(int i=0;i<t->capacite;i++){
 if(val==t->tab[i]){
 t->tab[i]=NULL;
 t->nbE--;
  }
 }
}


void main() {
tableauEntiers *a=creationTableau(5);
ajoutValeurFin(a,100);
ajoutValeurFin(a,100);
ajoutValeur(88,6,a);
ajoutValeur(88,24,a);ajoutValeurFin(a,77);ajoutValeurFin(a,1);ajoutValeur(88,49,a);
supprimeToutesValeurs(100,a);
afficheTableau(a);
destructionTableau(a);

}
